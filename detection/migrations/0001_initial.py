# Generated by Django 5.0.7 on 2025-09-21 10:08

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AIModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('model_type', models.CharField(choices=[('text', 'Text'), ('image', 'Image'), ('video', 'Video')], max_length=20)),
                ('version', models.CharField(default='1.0', max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False)),
                ('model_path', models.CharField(blank=True, max_length=500, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'ai_models',
            },
        ),
        migrations.CreateModel(
            name='ContentMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_type', models.CharField(choices=[('exact', 'Exact'), ('partial', 'Partial')], max_length=20)),
                ('confidence_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='low', max_length=20)),
                ('similarity_score', models.FloatField(default=0.0)),
                ('matched_segments', models.JSONField(default=list)),
                ('match_metadata', models.JSONField(default=dict)),
                ('is_reviewed', models.BooleanField(default=False)),
                ('is_confirmed', models.BooleanField(blank=True, null=True)),
                ('reviewer_notes', models.TextField(blank=True, null=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('action_taken', models.CharField(choices=[('none', 'No Action'), ('reported', 'Reported'), ('takedown', 'Takedown Requested'), ('ignored', 'Ignored')], default='none', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'content_matches',
            },
        ),
        migrations.CreateModel(
            name='DetectionJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('detection_types', models.JSONField(default=list)),
                ('similarity_threshold', models.FloatField(default=0.8)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('model_versions', models.JSONField(default=dict)),
                ('processing_time', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'detection_jobs',
            },
        ),
        migrations.CreateModel(
            name='FeedbackData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_type', models.CharField(choices=[('false_positive', 'False Positive'), ('false_negative', 'False Negative'), ('improvement', 'Improvement Suggestion')], max_length=20)),
                ('description', models.TextField(blank=True, null=True)),
                ('metadata', models.JSONField(default=dict)),
                ('is_processed', models.BooleanField(default=False)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'feedback_data',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ModelPerformanceLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('processing_time', models.FloatField()),
                ('accuracy', models.FloatField()),
                ('precision', models.FloatField()),
                ('recall', models.FloatField()),
                ('f1_score', models.FloatField()),
                ('test_dataset_size', models.IntegerField()),
                ('test_date', models.DateTimeField()),
                ('test_notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'model_performance_logs',
                'ordering': ['-test_date'],
            },
        ),
        migrations.CreateModel(
            name='ProtectedContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500)),
                ('description', models.TextField(blank=True, null=True)),
                ('content_type', models.CharField(choices=[('text', 'Text'), ('image', 'Image'), ('video', 'Video')], max_length=20)),
                ('text_content', models.TextField(blank=True, null=True)),
                ('file_path', models.FileField(blank=True, null=True, upload_to='protected_content/')),
                ('external_url', models.URLField(blank=True, null=True)),
                ('content_hash', models.CharField(max_length=64)),
                ('text_fingerprint', models.JSONField(default=dict)),
                ('visual_fingerprint', models.JSONField(default=dict)),
                ('audio_fingerprint', models.JSONField(default=dict)),
                ('tags', models.JSONField(default=list)),
                ('category', models.CharField(blank=True, max_length=100, null=True)),
                ('copyright_info', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('monitoring_enabled', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'protected_content',
            },
        ),
    ]
